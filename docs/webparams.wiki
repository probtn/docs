= Описание параметров кнопки =

Описание параметров используемых в кнопке (в соответствии с их применением). В случае, если параметр используется несколько отличным способом в разных режимах, этот будет помечено (включая искомые режимы).

Другие страницы:

* <code>index</code>
* <code>description</code>

== Badge ==

Badge представляет собой объект, который включает в себя графический элемент (логотип, эмблема, и т.д.) Пример Badge в виде логотипа &quot;probtnad&quot; можно видеть на картинке:

[[File:images/webparams/btn_badge.png|image]]

=== BadgeImage ===

Содержит ссылку на графический элемент Badge.

=== BadgePosition ===

Устанавливает положение Badge на креативе. В зависимости от значений, Badge может располагаться:

* <code>top_left</code> - в верхней левой части
* <code>top_right</code> - в верхней правой части
* <code>top_center</code> - в верхней части посередине
* <code>bottom_left</code>- в нижней части слева
* <code>bottom_right</code>- в нижней части справа
* <code>bottom_center</code>- в нижней части посередине.

=== BadgeSize ===

Устанавливает размер объекта Badge. Задается как объект <code>{ W: 64.0, H: 64.0 }</code> Где

* <code>W</code> - ширина в пикселях
* <code>H</code> - высота в пикселях.

=== BadgeActive ===

В зависимости от значения данного параметра Badge может быть включен или выключен.

* <code>true</code> - включен
* <code>false</code> - выключен

По умолчанию установлен в <code>true</code>.

=== ButtonShowedDurationPeriod ===

Указывает массив временных промежутков, через которые будет осуществляться отправка события ButtonShowedDurationPeriodic. По-умолчанию задан следующими значениями: <code>ButtonShowedDurationPeriod: [1000, 1000, 1000, 2000, 2000, 3000, 3000, 3000, 4000, 5000, 5000, 10000, 20000, 30000, 60000, 90000, 240000, 480000, 1800000]</code> Через 1000 мсек после запуска кнопки, событие будет отправлено в первый раз, затем еще через 1000 мсек - второй раз, еще через 1000 мсек - третий, затем , через 2000 мсек - четвертый и т.д.

== JsImpressionCode ==

Содержит пользовательский js-скрипт, который будет исполнен после запуска кнопки. Пример использования:

<code>'JsImpressionCode': '&lt;script&gt;alert(&quot;Hello World!&quot;);&lt;/script' + '&gt;'</code>.

== VideoItemHeaderImage ==

URL изображения, которое будет использоваться для брендинга (лого на видео) для видео контента (<code>ButtonContentType: video</code>). Если оно пустое, то строка таблицы и img не создаются.

По умолчанию: &quot;&quot;

== VideoPixel ==

Параметр, описывающий вызов той или иной трекинговой ссылки при попадании в разные временные интервалы при проигрывании видео. Ссылки могут вызываться многократно при прокрутке видео или перезапуске. Задается в виде JSON. Пример использования: <code>[{&quot;TrackingLink&quot;: &quot;1&quot;, &quot;StartPosition&quot;: 0.0, &quot;EndPosition&quot;: 0.25}, {&quot;TrackingLink&quot;: &quot;2&quot;, &quot;StartPosition&quot;: 0.25, &quot;EndPosition&quot;: 0.5},{&quot;TrackingLink&quot;: &quot;3&quot;, &quot;StartPosition&quot;: 0.5, &quot;EndPosition&quot;: 0.75},{&quot;TrackingLink&quot;: &quot;4&quot;, &quot;StartPosition&quot;: 0.75, &quot;EndPosition&quot;: 1}]</code> Где соответственно:

* <code>TrackingLink</code> - трекинговая ссылка, которая будет вызываться
* <code>StartPosition</code> - начало интервала, в секундах

- <code>EndPosition</code> - окончание интервала, в секундах По умолчанию: []

== BrandingImage ==

URL изображения, которое будет использоваться для брендинга страницы при перемещении кнопки. (Изображение будет использоваться как background-image для <code>#probtn_wrapper</code> элемента).

По умолчанию: &quot;&quot;

== CorrectPositionBeforeMove ==

Параметр, отвечающий за то корректировать ли положение кнопки до ее первого перемещения или нет. Если установлен в true, то в случае изменения ориентации устройства или же изменения размера окна бразуера позиция кнопки будет обновления в соответствии со стартовой позицией <code>ButtonPosition</code>

По умолчанию: <code>true</code>

== OnNoShowPixel ==

Пиксель вызываемый если кнопка НЕ показывается (в админке задается для всего аппа).

== OnShowPixel ==

Пиксель вызываемый если кнопка показывается (в админке задается для всего аппа).

== LocationPoints ==

Массив точек, для которых (в случае получения данных о геолокации) мы проверяем, находится ли пользователь в радиусе одной из них.

Массив состоит из обхектов формата <code>{&quot;rad&quot;: 500, &quot;lat&quot;: 33.33, &quot;lon&quot;: 55.55}</code>

Где соответственно:

* <code>rad</code> - радиус от точки, азадется в метрах
* <code>lat</code> - широта
* <code>lon</code> - долгота

== RequireLocation ==

Требуется ли для работы кнопки данные геолокации.

По умолчанию: <code>false</code>

== ButtonInjectPath ==

Путь по которому будет добавляться <code>#probtn_wrapper</code> блок кнопки, а также код модального окна.

По умолчанию: <code>body</code>

== waitIframeLoadedMsg ==

Ожидать сообщения от креатива о завершении загрузки и инициализации креатива, в частности <code>probtn_creative_loaded_message</code> сообщение.

<code>postMessage_button_control</code>

По умолчанию: <code>false</code>

== waitContentLoadedMsg ==

== animationData ==

Дополнительные данные для анимации, в частности используется для добавления описания пути анимации кнопки (генерируется редактором http://probtn-animation-service.azurewebsites.net/ )

== RoundButton ==

Формат: <code>&lt;режим&gt;_&lt;доп-параметр&gt;_&lt;цвет-заливки&gt;</code>

Варианты режима:

* <code>none</code> - ничего не делать, по умолчанию
* <code>auto</code> - автоматическое приведение формата кнопки до круга или элипса. Также возможно указать заливку свободного места, к примеру <code>auto_fill_#121212</code>
* <code>manual</code> - ручное указание &quot;закругления&quot; (указывается как второй параметр, к примеру <code>manual_30</code>)

== LockBody ==

Если включено, то мы применяем css стили для body для установки ширины и высоты равной 100%, а также скрытие полос прокрутки. Требуется для тех случаев, когда в модальном окне необходим ввод данных на ios во избежание смещения положения модального окна.

По умолчанию: false

== CloseButtonShowDelay ==

Время в ms до показа области закрытия, в случаях если <code>AlwaysShowCloseButton == true</code> (то есть область закрытия показывается всегда).

По умолчанию: 0

== SoundURL ==

URL до звукового файла, который будет воспроизведен на странице. Если поле пусто, то никакие действия производится не будут.

По умолчанию: &quot;&quot;

== SoundMode ==

Режим воспроизведения аудио.

По умолчанию: &quot;&quot;

Варианты:

* <code>autoStart</code> - автозапуск (за исключением ios, где данный режим работает аналогично режиму по умолчанию)
* &quot;&quot; - запуск звука после взаимодействия пользователя со страницей

Также возможно указать дополнительный подпараметр после первого параметра, разделяя знаком подчеркивания _

Варианты: * <code>cycle</code> - циклическое воспроизведение аудио до ее ручной остановки.

Пример:

<code>autoStart_cycle</code>

Заметка: Воспроизведение звука вручную останавливается если кнопка будет закрыта.

== UseExternalDataAboutUser ==

Использовать или нет дополнительные данные по пользователям из внешних систем (в настоящее время Amber data)

По умолчанию: false

== FancyboxcloseMethod ==

Анимация закрытия модального окна

По умолчанию: &quot;zoomOut&quot;

== FancyboxCloseSpeed ==

Длительность анимации закрытия модального окна

По умолчанию: 0

== CreativeId ==

Идентификатор креатива для обязательного показа

По умолчанию: &quot;&quot;

== PassbackCustomCode ==

В данном параметре возможно указать код, который будет вызываться в случае, если кнопка будет выключена (когда от admin.probtn.com придет <code>{&quot;ButtonVisible&quot;:false,&quot;ButtonEnabled&quot;:false}</code>)

Внимание - желательно предварительно тестировать желаемый код до использования.

По умолчанию &quot;&quot;.

== ModalWindowMode ==

Параметр, описывающий дополнительное поведение модального окна (показываемого при клике на кнопку).

Варианты:

* (пустое) - ничего не происходит отличного от поведения по умолчанию
* sidebarLeft
* sidebarRight
* sidebarTop
* sidebarBottom

По умолчанию &quot;&quot;.

== ExtrusionMode ==

Параметр, отвечающий за режим &quot;выдавливания&quot; страницы.

Варианты:

* (пустое) - ничего не происходит отличного от поведения по умолчанию
* topButton - body страницы будет сдвинуто вниз на высоту кнопки

По умолчанию &quot;&quot;.

== AdditionalTargetingParam ==

Дополнительный кастомный параметр для таргетинга, позволяющий гибко настроит таргетинг admin.probtn.com в зависимости от задач.

По умоланию &quot;&quot;.

== isAnimation ==

Варианты анимации кнопки.

Значения параметра:

* opacity
* rollout
* lookout
* forwardAndBack
* forwardStopAndAway
* anim1
* anim2
* upToDown
* topToBottomAndStop
* lookoutAndOut

=== Анимация opacity ===

Изменяет прозрачность кнопки с указанной в ButtonOpacity прозрачности кнопки до 0.55 по умолчанию. Также возможно задать конечную прозрачность, указав в качестве параметра <code>opacity_&lt;конечная прозрачность&gt;</code> к примеру <code>opacity_0.4</code>

=== Анимация rollout ===

Выдвижение кнопки по мере скролла страницы.

Возможно указать сторону из которой будет &quot;выдвигаться&quot; кнопка и максимальную ширину &quot;выдвижения&quot; (в процентах), в частности <code>rollout_&lt;сторона&gt;_&lt;ширина&gt;</code> к примеру <code>rollout</code>, <code>rollout_left</code>, <code>rollout_left_60</code>

=== Анимация lookout ===

Постоянное выдвижение и скрытие кнопки около края страницы.

Возможно указать сторону из которой будет &quot;выдвигаться&quot; кнопка, в частности <code>lookout_&lt;сторона&gt;</code> к примеру <code>lookout</code>, <code>lookout_left</code>, <code>lookout_right</code>

=== Анимация forwardAndBack ===

Кнопка перемещается от левого края до правого, затем обратно до левого.

=== Анимация forwardStopAndAway ===

Кнопка перемещается из-за левого края до середины, останавливается и затем перемещается за правый край. Длительность каждого этапа задается параметром <code>animationDuration</code>

=== Анимация upToDown ===

Перемещение кнопки сверху к низу экрана (либо наоборот, указав дополнительный параметр направления анимации)

<code>upToDown_&lt;сторона_up_или_down&gt;_&lt;длительность_ожидания_перед_запуском_анимации_в_мс&gt;</code>

=== topToBottomAndStop ===

Перемещение кнопки сверху к низу экрана (либо наоборот, указав дополнительный параметр направления анимации). В последствии <code>topToBottomAndStop</code> и <code>upToDown</code> будут объеденины для исключения дублирования.

== animationDuration ==

Длительность анимации, задается в мс.

== MenuTemplateVariant ==

Параметр предназначен для выбора шаблона отображения меню. (предназначен для <code>ButtonType==menu</code>)

Варианты значений параметра:

* list - шаблон по умолчанию, список
* radialcorner - частичное радиальное меню (кнопка находится в углу, и пункты меню выстроены в зоне от 0 до 90 градусов)
* circularCenter - круговое меню

== VideoType ==

Тип видео.

Варианты:

* mp4 - по умолчанию
* youtube - видео с youtube

== Debug ==

debug режим кнопки - отображает версию кнопки при открытом fancybox, дополнительный вывод в консоли.

По умолчанию <code>false</code>

== UseGeoLocation ==

Использовать ли получение данных о местоположении пользователя.

По умолчанию <code>false</code>

== WaitForGeoLocation ==

В случае использования геолокации ожидать ли получение координат (и в первый раз разрешения пользователя) до показа кнопки.

По умолчанию <code>false</code>

== loadJqueryPepJS ==

Загружать ли jquery.pep, если скрипт не обнаружил соответствующую функцию библиотеки.

По умолчанию <code>true</code>

== loadFancyboxJS ==

Загружать ли fancybox, если скрипт не обнаружил соответствующую функцию библиотеки

По умолчание <code>true</code>

== DisableButtonMove ==

Отключить ли возможность перемещения кнопки

По умолчанию:

* false

== waitForIframeButtonLoaded ==

Ждать ли пока загрузится контент iframe кнопки

По умолчанию:

* true

== ButtonIframeInitialSize ==

Размер кнопки. Задается как объект <code>{ W: 0, H: 0 }</code> Где W и H соответственно ширина и высота в px.

В случае, когда значения равны нулю, для iframe кнопки не применяется &quot;масштабирование&quot;.

Если указаны размеры, то iframe от этих размеров будет подгонятся под размеры, указанные в ButtonSize параметре соответственно.

== ButtonImageType ==

Тип содержимого кнопки. По умолчанию image

Варианты:

* image
* iframe

== ClickOnCloseButton ==

Скрытие кнопки по клику на кнопку. По умолчанию <code>false</code>

== AlwaysShowCloseButton ==

Всегда показывать область закрытия. По умолчанию <code>false</code>

== FullscreenClickLink ==

(Для режима <code>ButtonType=='fullscreen'</code>)

== HideWithoutInteractionTime ==

По умолчанию 0 (не скрывать).

Время, спустя которое кнопка скрывается, если не было с ней взаимодействия

== cssEaseDuration ==

Длительность анимации (в мс) для jquery.pep - по умолчанию 300.

== ChangeScrollButtonAtFullSiteHeight ==

Меняется ли изображение кнопки в scroll режиме на основе высоты сайта (true), или размера window (false)

== ControlInIframeFromParent ==

Управляется ли кнопка из родителя - по умолчанию false

== isAddUtmSource ==

Добавлять ли к ContentURL параметр utm_source. По умолчанию false

== UtmSourceUseOnlyDomain ==

По умолчанию false. Использовать ли по умолчанию в utm_source. В случае false - используется полный url, в случае true - использует только домен.

== UtmCampaign ==

Значение параметра utm_campaign, если пустая строка, то не указывается. По умолчанию &quot;&quot;

== UtmSource ==

Значение параметра utm_source, если пустая строка, то используется текущий url страницы (или домен, в зависимости от параметра UtmSourceUseOnlyDomain). По умолчанию &quot;&quot;

== IframeScale ==

Параметр для применения к iframe для transform: scale(value) По умолчанию 1. В случае если указан iframeScaleMinWidth !=0 рассчитывается исходя из данного параметра.

== ButtonInitDelay ==

Задержка перед показом кнопки (в мс), по умолчанию 0

== VideoClickURL ==

Ссылка, по которой переходит пользователь по нажатию на видео. (В случае если VideoClickURL =='' , то для этого подставляется строка из VideoPoster. Когда параметр пуст, ссылку на видео не добавляем)

== ButtonOnClick ==

событие по нажатию на кнопку (добавляется в onclick, необходимо для запуска видео под мобильными браузерами) По умолчанию: function start1() { var video = $(&quot;#video&quot;).get(0); video.play(); }; start1(); setTimeout(start1 , 1500);

== ButtonType ==

тип кнопки По умолчанию button - поведение кнопки по умолчанию.

Текущие варианты ButtonType:

* <code>button</code> - кнопка с iframe в fancybox
* <code>menu</code> - floating menu режим
* <code>smartbanner</code> - показ смартбаннера
* <code>fullscreen</code> - автозапуск содержимого после инициализации скрипта
* <code>button_and_active_zones</code> - кнопка с использованием активных зон
* <code>button_and_scroll_zones</code> - кнопка со сменой изображений с различными изображениями в разных зонах экрана (по высоте)
* <code>fullscreen_fancybox</code> - автозапуск содержимого в fancybox после инициализации скрипта
* <code>fullscreen_and_button</code> - одновременный показ кнопки и модального окна
* <code>expansionVideo</code> - расширяющаяся кнопка после нажатия (для mp4 плеера)
* <code>expansionButton</code> - расширяющаяся кнопка после нажатия

== ButtonContentType ==

Тип содержимого кнопки

По умолчанию

* iframe - показ страницы в iframe

Текущие варианты ButtonContentType

* iframe - страница в iframe
* video - показ видео
* anchor - переход на указанный якорь на странице (варианты ContentURL - полная ссылка или якорь на странице, к примеру #someAnchor - переход к якорю или ссылке происходит в той же вкладке

== VideoSize ==

Размер видео (необходим для корректного перерасчета размера видео, в связи с тем что некоторые мобильные браузеры по некоторой причине не сохраняют пропорции видео) Сам параметр - объект, который состоит из X и Y параметров (ширина и высота соответственно). Пример (оно же значение по умолчанию): VideoSize: <code>{ X: 1920, Y: 1080 }</code>

== VideoPoster ==

Постер для видео Представляет собой url (до картинки).

== TrackingLink ==

Ссылка на изображение, которое будет применено как background для wrapper'а кнопки. Введен в связи с необходимостью предоставить возможность указывать свое изображение-&quot;пиксель&quot; для сбора статистики о пользователе.

== MinimizeWrapperTime ==

Время (в мс), спустя которое уменьшается размер wrapper'а кнопки. Применен в связи с проблемами некорректной анимации в ряде случаев на мобильных устройствах

== OpenExternal ==

Параметр, отвечающий за то, как именно должна открываться ссылка (соответственно для ButtonType = button ) false - содержимое открывается в fancybox true - контент открывается в новой вкладке (применяется в случае, если сайт не может быть показан в iframe по тем или иным причинам)

== CampaignID ==

Идентификатор кампании

== NeverClose ==

При true убирает область закрытия для кнопки Применимо при ButtonType = button

== domain ==

Домен, для которого запрашиваются настройки для кнопки. Если не указан, то домен будет получен автоматически и будет соответствовать тому, на котором в настоящий момент и запущена кнопка.

В случае, если указан параметр <code>domain</code>, то реальный домен страницы не будет использоваться и будут получены настройки для указанного в параметре <code>domain</code> домена.

== fancyboxJsPath ==

Url до расположения fancybox js библиотеки.

== fancyboxCssPath ==

Url до расположения fancybox css

== jqueryPepPath ==

Url до расположения jquery.pep библиотеки

== buttonAnimationTimeAfterFancybox ==

Длительность анимации кнопки после закрытия fancybox, в мс

== HideAfterFirstShow ==

Возможность скрыть кнопку после первого показа пользователю

* true - после первого показа кнопка скрывается (до тех пор, пока HideAfterFirstShow не будет установлен в true, либо не истечет срок действия cookie)
* false - кнопка показывается каждый раз (естественно в зависимости от настроек сервера и таргетинга на стороне сервера)

Применимо при ButtonType = button

== LoadFancyboxCSS ==

Загружать или нет css по-умолчанию для fancybox

* true - загружать
* false - не загружать (к примеру в случае если на сайте уже используется fancybox)

== ContentURL ==

Url на контент, показываемый кнопкой. Для разных ButtonContentType

* iframe - любая ссылка на сайт или иной контент, показываемый в iframe
* video - ссылка на видео (формата, поддерживаемого HTML5 video)

== ButtonEnabled ==

Включена / выключена

== ButtonVisible ==

Видна / не видна

== ButtonPosition ==

Позиция кнопки. Задается как объект <code>{X:0.5, Y:.5}</code> Где X и Y указывается от 0 до 1 (от 0 до 1, где 1 - ширина или высота window соответственно) Применимо при ButtonType = button

== ButtonSize ==

Размер кнопки. Задается как объект <code>{ W: 64.0, H: 64.0 }</code> Где W и H соответственно ширина и высота в px Применимо при ButtonType = button

== ButtonDragSize ==

Размер кнопки во время перетаскивания. Задается как объект <code>{ W: 64.0, H: 64.0 }</code> Где W и H соответственно ширина и высота в px.

Применимо при <code>uttonType = button</code>

== ButtonOpacity ==

Прозрачность кнопки. Задается от 0 до 1 (0 - полностью прозрачна, 1 - не прозрачна).

Применимо при <code>ButtonType = button</code>

== ButtonDragOpacity ==

Прозрачность при перетаскивании кнопки.

Применимо при <code>ButtonType = button</code>

== ButtonImage ==

Ссылка на картинку кнопки. Применимо при <code>ButtonType = button</code>

== ButtonDragImage ==

Ссылка на картинку кнопки в момент ее перетаскивания.

Применимо при <code>ButtonType = button</code>

== ClosePosition ==

Позиция области закрытия кнопки. Задается как объект <code>{X:0.5, Y:.5}</code> Где X и Y указывается от 0 до 1 (от 0 до 1, где 1 - ширина или высота window соответственно) Применимо при <code>ButtonType = button</code>

== CloseSize ==

Размер области закрытия. Задается как объект <code>{ W: 64.0, H: 64.0 }</code> Где W и H соответственно ширина и высота в px.

Применимо при <code>ButtonType = button</code>

== CloseActiveSize ==

Размер области закрытия в активном состоянии (когда кнопка наведена на область закрытия). Задается как объект <code>{ W: 64.0, H: 64.0 }</code> Где W и H соответственно ширина и высота в px.

Применимо при <code>ButtonType = button</code>

== CloseOpacity ==

Прозрачность области закрытия.

Применимо при <code>ButtonType = button</code>

== CloseActiveOpacity ==

Прозрачность области закрытия в активном состоянии (при наведении кнопки).

Применимо при <code>ButtonType = button</code>

== CloseImage ==

Ссылка на изображение для области закрытия.

Применимо при <code>ButtonType = button</code>

== HintLabelInsets ==

Отступы для текста (текст под кнопкой). Задается в формате <code>{ T: 4.0, B: 4.0, L: 4.0, R: 4.0 }</code>

Применимо при <code>ButtonType = button</code>

== HintText ==

Текст для &quot;подсказки&quot; кнопки.

Применимо при <code>ButtonType = button</code>

== HintFont ==

Параметры шрифта для &quot;подсказки&quot; кнопки. Задается как объект <code>{ Family: &quot;Arial&quot;, Size: 18 }</code>

* Family - шрифт для надписи. Указывается для font-family
* Size - размер текста

Применимо при <code>ButtonType = button</code>

== HintFontColor ==

Цвет надписи. Задается как объект <code>{ R: 1.0, G: 1.0, B: 1.0, A: 1.0  }</code>

Применимо при <code>ButtonType = button</code>

== VendorText ==

Текст вендора (показывается внизу fancybox)

== VendorSite ==

Ссылка на сайт вендора

== VendorTextFont ==

Формат соответствует параметру HintFont

== VendorTextColor ==

Цвет для VendorText. Формат соответствует HintFontColor

== VendorColor ==

Цвет фона для VendorText

== VideoFooterButton ==

Добавляет кликабельную область на видео. Задается в виде JSON. Пример использования: '{&quot;href&quot;: &quot;https://viewst.com&quot;, &quot;startTime&quot;: 30, &quot;top&quot;: 914, &quot;left&quot;: 255, &quot;width&quot;: 220, &quot;height&quot;: 220}' Где соответственно:

* <code>href</code> - ссылка, на которую будет осуществлен переход
* <code>startTime</code> - время появления области на видео
* <code>top</code> - положение на оригинальном видео, начиная от верхней грани видео (в пикселях)
* <code>left</code> - положение на оригинальном видео, начиная от левой грани видео (в пикселях)
* <code>width</code> - ширина области на оригинальном видео (в пикселях)
* <code>height</code> - высота области на оригинальном видео (в пикселях)

== iframeScaleMinWidth ==

Минимальная ширина для сайта внутри iframe. Если текущая ширина fancybox меньше искомой iframeScaleMinWidth, то iframe при помощи transform масштабируется, чтобы поместится в текущую ширину Данный способ подходит для сайтов, которые сами не могут адаптироваться к таковой ширине. По умолчанию 0 - в этом случае масштабирования не производим.

== iframeScale ==

По умолчанию 1. Параметр scale для transform iframe'а. Вычисляется автоматически на основе iframeScaleMinWidth и ширины fancybox

== HintOpacity ==

Прозрачность надписи. (от 0 до 1). Применимо при ButtonType = button

== HintImage ==

Фоновое изображение для подписи кнопки. Применимо при ButtonType = button

== ContentSize ==

Размер для fancybox.

Представляет собой объект <code>{ W: 100, H: 100, X: &quot;90%&quot;, Y: &quot;90%&quot; }</code>

В случае, если параметр IsManualSize = true, то присутствуют X и Y, представляющие собой размер в процентах. В ином случае используются W и H (ширина и высота соответственно) в px.

== IsManualSize ==

В случае, если параметр IsManualSize = true, тo в ContentSize присутствуют X и Y, представляющие собой размер в процентах.

В ином случае используются W и H (ширина и высота соответственно) в px.

== ContentInsets ==

Отступы для fancybox (и всего что используется вместо него).

Представляет собой объект <code>{ T: -2.0, B: -2.0, L: -2.0, R: -2.0 }</code> с соответственно отступами для top, bottom, left и right.

Если ContentInsets меньше 0, то отступы рассчитываются автоматически на основе размеров кнопки.

== HideInFrame ==

Параметр, отвечающий за то, показывать кнопкy на странице внутри iframe или нет.

* true - скрывать кнопку, когда страница показывается в iframe
* false - не скрывать кнопку, когда страница показывается в iframe

== ZCustomCss ==

По умолчанию &quot;&quot;.

В случае, если в данном параметре присутствует текст, он будет добавлен как css в страницу. Параметр нужен, если необходимо модифицировать css страницы без вмешательства в код.

== showInParent ==

По умолчанию <code>false</code>.

Если кнопка находится в iframe и родительское окно как и старница в iframe размещены на одном и том же домене, то при true кнопка добавит в родителя код <code>//cdn.probtn.com/includepb.min.js</code> для запуска кнопки в родителе.

== isHPMD ==

По умолчанию <code>false</code>.

В случае, если установлено в true, то будут вызываться события HPMD

== dfp ==

Объект для настроек при использовании DFP Google.

dfp: <code>{ isDFP: false,  clickUrlEsc: &quot;&quot;, cacheBuster: &quot;&quot;}</code>

* <code>isDFP</code> - используется ли DFP
* <code>clickUrlEsc</code> - ссылка из макроса DFP для отслеживания кликов

== ClickCounterLink ==

Ссылка вызываемая при нажатии на кнопку. Необходима для случаев, когда требуется сторонний подсчет статистики (в частности кликов по кнопке) - для данной ссылки производится ajax запрос

== isServerCommunicationEnabled ==

По умолчанию <code>true</code>.

Параметр отвечает за то, включено ли взаимодействие с сервером (в частности получение настроек и отправку статистики).

== useLocalFileSettings ==

По умолчанию <code>false</code>.

Параметр отвечает за использование json файл с настройками кнопки.

== localSettingsPath ==

Url (абсолютный или относительный) до json файла.

По умолчанию <code>&quot;settings.json&quot;</code>

== isSmartBanner ==

По умолчанию false Если true, то вместо кнопки будет показываться смартбаннер (на основе https://github.com/jasny/jquery.smartbanner )

== smartbannerJsPath ==

Путь по умолчанию до jquery.smartbanner.js

<code>//cdn.probtn.com/libs/jquery.smartbanner.js</code>

== smartbannerCssPath ==

Путь по умолчанию до jquery.smartbanner.css

<code>//cdn.probtn.com/libs/jquery.smartbanner.css</code>

== smartbanner ==

Объект с настройками для smartbanner'a

Настройки по умолчанию

<dl>
<dt>::</dt>
<dd><dl>
<dt>{</dt>
<dd><p>iosAppId: null, androidAppId: null, isFixed: false, //if true, smartbanner will have position: fixed style isFixedMode: 'default', //default - position fixed over content // extrusion - banner is fixed, but content moved down (banner height) - so banner don't close any content at page</p>
<p>title: null, // What the title of the app should be in the banner (defaults to &lt;title&gt;) author: null, // What the author of the app should be in the banner (defaults to &lt;meta name=&quot;author&quot;&gt; or hostname) price: 'FREE', // Price of the app appStoreLanguage: 'us', // Language code for App Store inAppStore: 'On the App Store', // Text of price for iOS inGooglePlay: 'In Google Play', // Text of price for Android inAmazonAppStore: 'In the Amazon Appstore', inWindowsStore: 'In the Windows Store', // Text of price for Windows GooglePlayParams: null, // Aditional parameters for the market icon: null, // The URL of the icon (defaults to &lt;meta name=&quot;apple-touch-icon&quot;&gt;) iconGloss: null, // Force gloss effect for iOS even for precomposed url: null, // The URL for the button. Keep null if you want the button to link to the app store. button: 'VIEW', // Text for the install button scale: 'auto', // Scale based on viewport size (set to 1 to disable) speedIn: 300, // Show animation speed of the banner speedOut: 400, // Close animation speed of the banner daysHidden: 15, // Duration (in days) to hide the banner after being closed (0 = always show banner) daysReminder: 90, // Duration (in days) to hide the banner after &quot;VIEW&quot; is clicked ''separate from when the close button is clicked'' (0 = always show banner) force: null, // Choose 'ios', 'android' or 'windows'. Don't do a browser check, just always show this banner hideOnInstall: true, // Hide the banner after &quot;VIEW&quot; is clicked. layer: false, // Display as overlay layer or slide down the page iOSUniversalApp: true // If the iOS App is a universal app for both iPad and iPhone, display Smart Banner to iPad users, too. appendToSelector: 'body' //Append the banner to a specific selector</p></dd></dl>

<p>}</p></dd></dl>

== MainButtonClickable ==

Можно ли нажать на основную кнопку, по умолчанию true

== Menu параметры ==

Использование scroll-зон возможно в случае если ButtonType==&quot;menu&quot;

=== MenuItems ===

Массив с объектами, описывающими scroll зоны

Описание объекта из MenuItems

=== Text ===

Текст пункта меню

=== ActionURL ===

Ссылка для перехода по нажатию на пункт меню

=== Image ===

Картинка пункта меню

=== Name ===

Уникальное название пункта меню (для статистики)

=== Type ===

Тип пункта меню. По умолчанию external Варианты: * external * video * iframe

=== MenuOptions ===

Объект с описанием основных свойств меню

=== FontSize ===

Размер шрифта пункта меню

=== FontFamily ===

Шрифт для пункта меню

=== BackgroundColor ===

Цвет фона пункта меню

=== ForegroundColor ===

Цвет текста пункта меню

=== MenuHeight ===

Высота пункта меню

Пример объекта:

<pre>MenuOptions : {
    FontSize: &quot;1.4em&quot;,
    FontFamily: '&quot;Helvetica Neue&quot;,Helvetica,Arial,&quot;Lucida Grande&quot;,sans-serif',
    BackgroundColor: 'rgba(49,55,61,.95)',
    ForegroundColor: '#fff',
    MenuHeight: &quot;3.4em&quot;
}</pre>
== Scroll параметры ==

Использование scroll-зон возможно в случае если ButtonType==&quot;button_and_scroll_zones&quot;

=== ScrollZones ===

Массив с объектами, описывающими scroll зоны

Описание объекта из ScrollZones

=== ButtonContentType ===

Тип содержимого для данной зоны

По умолчанию

* iframe - показ страницы в iframe

Текущие варианты ButtonContentType

* iframe - страница в iframe
* video - показ видео
* anchor - переход на указанный якорь на странице (варианты ContentURL - полная ссылка или якорь на странице, к примеру #someAnchor - переход к якорю или ссылке происходит в той же вкладке
* anchor_external - открытие страницы в новой вкладке

=== ZoneHeight ===

Высота зоны (полная высота страницы = 1)

=== ButtonImage ===

Url картинки кнопки

=== ButtonDragImage ===

Url картинки кнопки при перетаскивании

=== HintText ===

Текст для картинки

=== TrackingLink ===

Url для сбора статистики (при клике на кнопку)

=== CustomButtonParams ===

Использовать ли дополнительные параметры для кнопки (размеры, прозрачность, etc.) По умолчанию false

=== ButtonSize ===

Размер кнопки. Задается как объект { W: 64.0, H: 64.0 } Где W и H соответственно ширина и высота в px

=== ButtonDragSize ===

Размер кнопки во время перетаскивания. Задается как объект { W: 64.0, H: 64.0 } Где W и H соответственно ширина и высота в px

=== ButtonOpacity ===

Прозрачность кнопки. Задается от 0 до 1 (0 - полностью прозрачна, 1 - не прозрачна)

=== ButtonDragOpacity ===

Прозрачность при перетаскивании кнопки

=== ButtonIframeInitialSize ===

Размер кнопки. Задается как объект <code>{ W: 0, H: 0 }</code> Где W и H соответственно ширина и высота в px

В случае, когда значения равны нулю, для iframe кнопки не применяется &quot;масштабирование&quot;. Если указаны размеры, то iframe от этих размеров будет погонятся под размеры, указанные в ButtonSize (или ButtonSize текущей зоны) параметре соответственно.

Пример

<pre>ScrollZones: [
                    {
                       ZoneHeight: 0.5,
                       ButtonImage: &quot;//cdnjs.cloudflare.com/ajax/libs/probtn/1.0.0/images/probtn/gray.png&quot;,
                       ButtonDragImage: &quot;&quot;,
                       HintText: &quot;&quot;,
                       TrackingLink: &quot;&quot;,
                       CustomButtonParams: false,
                    ButtonSize: { // Размер
                        W: 64.0,
                        H: 64.0
                    },
                    ButtonDragSize: { // Размер при перемещении
                        W: 68.0,
                        H: 68.0
                    },
                    ButtonOpacity: 0.8, // Прозрачность
                    ButtonDragOpacity: 1.0 // Прозрачность при перемещении
                    },
                    {
                       ZoneHeight: 0.5,
                       ButtonImage: &quot;//cdnjs.cloudflare.com/ajax/libs/probtn/1.0.0/images/probtn/gray.png&quot;,
                       ButtonDragImage: &quot;&quot;,
                       HintText: &quot;&quot;,
                       TrackingLink: &quot;&quot;,
                       CustomButtonParams: false,
                    ButtonSize: { // Размер
                        W: 64.0,
                        H: 64.0
                    },
                    ButtonDragSize: { // Размер при перемещении
                        W: 68.0,
                        H: 68.0
                    },
                    ButtonOpacity: 0.8, // Прозрачность
                    ButtonDragOpacity: 1.0 // Прозрачность при перемещении
                    }
                ]</pre>
== ActiveZones параметры ==

Использование активных зон возможно в случае если ButtonType==&quot;button_and_active_zones&quot;

=== ActiveZones ===

Массив с объектами, описывающими активные зоны

Описание объекта из ActiveZone

=== Name ===

Уникальное название зоны (A-Za-z0-9)

=== ButtonImageType ===

Тип содержимого кнопки. По умолчанию image

Варианты:

* image
* iframe

=== ButtonIframeInitialSize ===

Размер кнопки. Задается как объект <code>{ W: 0, H: 0 }</code> Где W и H соответственно ширина и высота в px

В случае, когда значения равны нулю, для iframe кнопки не применяется &quot;масштабирование&quot;. Если указаны размеры, то iframe от этих размеров будет погонятся под размеры, указанные в ButtonSize параметре соответственно.

=== Position ===

Объект, описывающий местоположение зоны.

Пример:

<code>Position: { X: 0.1, Y: 0.1 }</code>

Позиция указывается как число от 0 до 1

=== ActiveImage ===

Ссылка на изображение для активной зоны (при наведении кнопки)

=== InactiveImage ===

Ссылка на изображение для неактивной зоны (по умолчанию, при отсутствии наведения на зону)

=== ActionURL ===

Ссылка, которая будет открыта при &quot;сбрасывании&quot; кнопки на зону. В случае, если ActionURL==&quot;&quot; (пустая строка), то откроется ссылка указанная в ContentURL (показываемая при нажатии на кнопку)

=== VisibleOnlyInteraction ===

true/false По умолчанию true * В случае true активная зона показывается только во время взаимодействия с кнопкой (ее перемещения) * В случае false активная зона видна всегда

=== ClickCounterLink ===

По умолчанию - false Ссылка вызываемая при сбрасывании кнопки на активную зону. Необходима для случаев, когда требуется сторонний подсчет статистики (в частности кликов по кнопке) - для данной ссылки производится ajax запрос

=== ActiveSize ===

Размер зоны в активном состоянии Представляет собой ActiveSize: { W: 64, H: 64 } Где W - ширина, H - высота

=== InactiveSize ===

Размер зоны в активном состоянии. Представляет собой <code>InactiveSize: { W: 64, H: 64 }</code>

Где W - ширина, H - высота

=== InactiveOpacity ===

Прозрачность зоны в неактивном состоянии

=== ActiveOpacity ===

Прозрачность зоны в активном состоянии

Пример

<pre>IsActiveZones: false,
                ActiveZones: [
                    {
                        Name: &quot;Area1&quot;,
                        Position: {
                            X: 0.1,
                            Y: 0.1
                        },
                        ActiveImage: &quot;//probtnexample1.azurewebsites.net/img/logo.png&quot;,
                        InactiveImage: &quot;//admin.probtn.com/eqwid_btn_nonpress.png&quot;,
                        ActiveSize: {
                            W: 64,
                            H: 64
                        },
                        InactiveSize: {
                            W: 64,
                            H: 64
                        },
                        ActionURL: &quot;http://m0rg0t.ru&quot;,
                        ClickCounterLink: &quot;&quot;,
                        VisibleOnlyInteraction: true,
                    },
                    {
                        Name: &quot;Area2&quot;,
                        Position: {
                            X: 0.6,
                            Y: 0.1
                        },
                        ActiveImage: &quot;//probtnexample1.azurewebsites.net/img/logo.png&quot;,
                        InactiveImage: &quot;//admin.probtn.com/eqwid_btn_nonpress.png&quot;,
                        ActiveSize: {
                            W: 64,
                            H: 64
                        },
                        InactiveSize: {
                            W: 64,
                            H: 64
                        },
                        ActionURL: &quot;&quot;,
                        ClickCounterLink: &quot;&quot;,
                        VisibleOnlyInteraction: false,
                        InactiveOpacity: 0.8,
                        ActiveOpacity: 1
                    }
                ]</pre>
= Неиспользуемые параметры =

== ContentWebViewInsets ==

Не используется

== BaseInsets ==

не используется в текущей версии кнопки

== ButtonOpenImage ==

Не используется

== ButtonInactiveImage ==

Не используется

== CloseActiveImage ==

Не используется. Ссылка на изображение для области закрытия в активном состоянии.

== ButtonOpenSize ==

Не используется. Размер кнопки когда открыт fancybox. Задается как объект { W: 64.0, H: 64.0 } Где W и H соответственно ширина и высота в px

== ButtonInactiveSize ==

Не используется. Размер кнопки в неактивном состоянии. Задается как объект { W: 64.0, H: 64.0 } Где W и H соответственно ширина и высота в px

== HintInsets ==

Не используется

== ButtonOpenOpacity ==

Не используется

== ButtonInactiveOpacity ==

Не используется

== HintImageInsets ==

Не используется

== VendorOpacity ==

Не используется

== ContentImageInsets ==

Не используется

== ContentOpacity ==

Не используется

== ContentBackOpacity ==

Не используется

== ContentBackColor ==

Не используется

== ContentActivityColor ==

Не используется

== ContentImage ==

Не используется

== ContentArrowSize ==

Не используется

== ContentArrowOffset ==

Не используется

== ContentArrowImageT ==

Не используется

== ContentArrowImageB ==

Не используется

== ContentArrowImageL ==

Не используется

== ContentArrowImageR ==

Не используется

== HintArrowSize ==

Не используется.

== HintArrowOffset ==

Не используется.

== HintArrowImageT ==

Не используется.

== HintArrowImageB ==

Не используется.

== HintArrowImageL ==

Не используется.

== HintArrowImageR ==

Не используется.

== Остальные параметры ==

DefaultDuration, DefaultDelay, OpenDuration, OpenDelay, CloseDuration, CloseDelay, ButtonShowDuration, ButtonShowDelay, ButtonHideDuration, ButtonHideDelay, ButtonDragDuration, ButtonDragDelay, ButtonUndragDuration: 0.2, ButtonUndragDelay, ButtonInactiveDuration, ButtonInactiveDelay, ButtonInertiaSpeed, ButtonInertiaSpeedMin, ButtonInertiaSpeedMax, ButtonInertiaFactor, CloseShowDuration, CloseShowDelay, CloseHideDuration, CloseHideDelay, CloseActiveDuration, CloseActiveDelay, CloseUnactiveDuration, CloseUnactiveDelay, HintLaunchDuration, HintLaunchDelay, HintShowDuration, HintShowDelay, HintHideDuration, HintHideDelay, ContentShowDuration, ContentShowDelay, ContentHideDuration, ContentHideDelay

Не используется

= Параметры по умолчания для кнопки =
